#+title: =Torresmo Emacs=
#+AUTHOR: Matheus Almeida
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* About this configuration

This is the personal configuration of Torresmo, seeking the truth following the path of The Great Debugger God.
If you have any suggestion fell free to open a Issue or send me a message on [[https://twitter.com/Math_Almeid][Twitter]]

* General Configuration

This section configures core things of this configuration.

** Startup Performace

#+begin_src emacs-lisp

  ;; This defines the number of bytes of consing between garbage collections. 
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 20 1000 1000))

  (defun torresmo/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'torresmo/display-startup-time)

#+end_src

** Warnings
Details about warnings and options to dealing with then [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Warning-Basics.html][here]] and [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Warning-Options.html][here]]

#+begin_src emacs-lisp

  (setq warning-minimum-level :error)
  
#+end_src

** Package System Setup

Use [[https://github.com/jwiegley/use-package][use-package]] to make easy to install and configure packages

#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean.

#+begin_src emacs-lisp

  ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory "~/.cache/emacs")

  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering)
  (no-littering-theme-backups)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
  `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

  (setq auto-save-list-file-prefix
  (no-littering-expand-var-file-name "auto-save/.saves-"))

#+end_src

** Keybidings

*** Esc Cancels All

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

*** Yes/No Replacement

Replaces the words "yes" and "no" for "y" or "n"

#+begin_src emacs-lisp

  (defalias 'yes-or-no-p 'y-or-n-p) ;; replaces "yes or no" by "y or n"
  
#+end_src

*** Rebind C-u

Since I let =evil-mode= take over =C-u= for buffer scrolling, I need to re-bind the universal-argument command to another key sequence. I’m choosing =C-M-u= for this purpose.

#+begin_src emacs-lisp

  (global-set-key (kbd "C-M-u") 'universal-argument)

#+end_src

*** Simplify Leader Bidings

[[https://github.com/noctuid/general.el][general.el]] is a fantastic lib for defining prefixed keybidings, especially in conjunction with Evil modes.

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup t)

    (general-create-definer torresmo/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC" ;; Works on normal mode
      :global-prefix "C-SPC") ;; Works in all modes

    (torresmo/leader-keys
      "m" '(:ignore t :which-key "Misc")
      "mt" '(counsel-load-theme :which-key "choose theme")
      "/" '(counsel-projectile-ag :which-key "find in project")))

#+end_src

*** Dotfiles Keybidings

I create some useful keybidings for jumping into especific configuration files.

#+begin_src emacs-lisp

  (defun torresmo/open-emacs-file()
    (interactive)
    (find-file (expand-file-name "~/Workspaces/Personal/dotfiles/Emacs/Emacs.org")))

  (defun torresmo/open-makefile()
    (interactive)
    (find-file (expand-file-name "~/Workspaces/Personal/dotfiles/Makefile")))

  (defun torresmo/open-zsh-file()
    (interactive)
    (find-file (expand-file-name "~/Workspaces/Personal/dotfiles/Zsh/.zshrc")))

  (defun torresmo/open-gitconfig-file()
    (interactive)
    (find-file (expand-file-name "~/Workspaces/Personal/dotfiles/Git/.gitconfig")))

  ;; Since I have only one keyboard I will open his config file
  (defun torresmo/open-keyboard-file()
    (interactive)
    (find-file (expand-file-name "~/Workspaces/Personal/dotfiles/Keyboard/corne/corne.keymap")))
  
  ;; Open hyprland configuration file since it's where I define most of things
  (defun torresmo/open-desktop-file()
    (interactive)
    (find-file (expand-file-name "~/Workspaces/Personal/dotfiles/Desktop/hypr/hyprland.conf")))

  (torresmo/leader-keys
      "c" '(:ignore t :which-key "Configuration")
      "cg" '(torresmo/open-gitconfig-file :which-key "Git")
      "cm" '(torresmo/open-makefile :which-key "Makefile")
      "ce" '(torresmo/open-emacs-file :which-key "Emacs")
      "ck" '(torresmo/open-keyboard-file :which-key "Keyboard")
      "cd" '(torresmo/open-desktop-file :which-key "Desktop")
      "cz" '(torresmo/open-zsh-file :which-key "Zsh"))

#+end_src

*** Stateful Keymas with Hydra

#+begin_src emacs-lisp

  (use-package hydra
    :defer t)

#+end_src

*** Let's Be Evil

Since I come from Vim, I like to use [[https://evil.readthedocs.io/en/latest/index.html][evil-mode.]]
The [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automactically configure various Emacs modes with Vi-like keybindings for evil-mode

#+begin_src emacs-lisp

  (use-package undo-tree
    :init
    (global-undo-tree-mode 1))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

*** Files and Buffers Keybidings

Create keybidings for find files and buffers

#+begin_src emacs-lisp

  (torresmo/leader-keys 
    "f" '(:ignore t :which-key "File")
    "b" '(:ignore t :which-key "Buffer")
    "ff" '(counsel-find-file :which-key "Find File")
    "bb" '(projectile-switch-to-buffer :which-key "Find Buffer")
    "bB" '(ivy-switch-buffer :which-key "Find All Buffers")
    "bd" '(kill-this-buffer :which-key "Kill Buffer")
    "bc" '(flymake-show-diagnostics-buffer :which-key "Diagnostic Buffer")
    )

#+end_src

*** Jump commands

Create jumping around things and simplify code navigation

#+begin_src emacs-lisp

  (torresmo/leader-keys 
    "j" '(:ignore t :which-key "Jump")
    "jj" '(pop-to-mark-command :which-key "To mark")
    )

#+end_src

* UI Configuration

This section configures UI settings and defines the apparence of the Editor.

** Variables

Variables to adjust in each system

#+begin_src emacs-lisp

  (defvar torresmo/default-font-size 100)
  (defvar torresmo/default-variable-font-size 100)

  ;; Make frame transparency overridable
  (defvar torresmo/frame-transparency '(90 . 90))
  
#+end_src

** Basic Configuration

Remove ugly stuff and make Emacs look more minimal and modern

#+begin_src emacs-lisp

  (setq inhibit-startup-message t) ;;Disable startup message

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell nil)
  
  ;; Disable beep song
  (setq ring-bell-function 'ignore)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha torresmo/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,torresmo/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

I like to use [[https://github.com/tonsky/FiraCode ][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]], bot fonts needs to be installed on machine

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Fira Code Retina" :height torresmo/default-font-size)

  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height torresmo/default-font-size)

  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height torresmo/default-variable-font-size :weight 'regular)

#+end_src

*** Debian

To install in Debian based OS we can run the following piece of code in terminal

#+begin_src shell :tangle no

  sudo apt install fonts-firacode fonts-cantarell -y

#+end_src

** Color Themes

[[https://github.com/doomemacs/themes][doom-themes]] is a set of themes used by [[https://github.com/doomemacs/doomemacs][Doom Emacs]]. We can run =M-x counsel-load-theme= to choose between them.

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-opera  t))

#+end_src

** Change Highlighting colours

Better collours in changes highlighting

#+begin_src emacs-lisp

  (defun torresmo-highlight-changes-config ()
    (set-face-foreground 'highlight-changes nil)
    (set-face-background 'highlight-changes "#3d5839")
    (set-face-foreground 'highlight-changes-delete nil)
    (set-face-background 'highlight-changes-delete "#f5b5b5"))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a attractive and rich mode line config for Emacs.

*NOTE:* The first time you load in new machine, you'll need to run =M-x all-the-icons-install-fonts= and =M-x nerd-icons-install-fonts= so that mode line icons display correctly

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-heigth 15)))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful panel that appears when you start to pressing any keybinding in Emacs and offer all possible completions fot the prefix.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace =find-file= with =counsel-find-file=, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-partial)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

*** Improve Candidate Sorting

[[https://github.com/radian-software/prescient.el][prescient.el]] provides some helpful behavior for sorting Ivy completion candidates. It can be especially helpful when using =M-x=

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Comment the following line to disable sorting remembered across sessions
    (prescient-persist-mode 1)

    (ivy-prescient-mode 1))

#+end_src

** Helpfull Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of information to Emacs command buffers.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Text Scaling

Use of [[https://github.com/abo-abo/hydra][Hydra]] to quickly adjust scale of text on screen.

#+begin_src emacs-lisp

    (defhydra hydra-text-scale (:timeout 4)
      "scale text"
      ("j" text-scale-increase "in")
      ("k" text-scale-decrease "out")
      ("f" nil "finished" :exit t))

    (torresmo/leader-keys
      "ms" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Productivity

This section configures all tools to improve productivity and help the daily things.

** Org Mode

[[https://orgmode.org/][Org Mode]] is one of the most awesome things in Emacs. It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

*** Fonts and Bullets

Use bullets characters instead of asterisks.

#+begin_src emacs-lisp

  (defun torresmo/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

    ;; Get rid of the background on column views
    (set-face-attribute 'org-column nil :background nil)
    (set-face-attribute 'org-column-title nil :background nil))

#+end_src

*** Org Configuration

Set up Org Mode with a baseline configuration. The following sections will ad more things to it.

#+begin_src emacs-lisp

  (defun torresmo/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . torresmo/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

#+end_src

*** Workflow

This section contains the description and configuration of the productivity workflow I use with Org Mode.

**** Agenda files

#+begin_src emacs-lisp
   
  (setq org-directory "~/Workspaces/Personal/Notes")

  (setq org-agenda-files `(,org-directory))
  
  (defun torresmo/org-path (path)
    (expand-file-name path org-directory))

  (setq org-default-notes-file (torresmo/org-path "Inbox.org"))

#+end_src

**** Todo keywords

#+begin_src emacs-lisp

  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "DOING(d)" "|" "DONE(d!)")
      (sequence "|" "WAIT(w)" "CANCELED(c)")))

  ;; TODO: org-todo-keyword-faces
  (setq org-todo-keyword-faces
    '(("NEXT" . (:foreground "MediumPurple3" :weight bold))
      ("DOING" . (:foreground "White" :weight bold))
      ("WAIT" . (:foreground "HotPink2" :weight bold))
      ("CANCELED" . (:foreground "orange red" :weight bold))))
    
#+end_src

**** Tags

Tags are used to filter all tasks to find anything actionable in a particular context. I use the =@home= and =@work= tags for explicit contexts and then the rest are used for filtering tasks for agenda views.
- =followup= - Someone is waiting on me to follow up on this task, it should be prioritized above others

#+begin_src emacs-lisp

  (setq org-tag-alist
    '((:startgroup)
      ; Put mutually exclusive tags here
       (:endgroup)
       ("@home" . ?H)
       ("@work" . ?W)
       ("followup" . ?f)))  
     
#+end_src

**** Refiling

#+begin_src emacs-lisp

  ;; Set refile targets
  (setq org-refile-targets
        '(("~/Workspaces/Personal/Notes/Archive.org" :maxlevel . 1)
          ("~/Workspaces/Personal/Notes/Tasks.org" :maxlevel . 1)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
  
#+end_src

**** Custom Commands

#+begin_src emacs-lisp

  (add-to-list 'org-export-backends 'md)
  
  (setq org-agenda-window-setup 'current-window)
  (setq org-agenda-span 'day)
  (setq org-agenda-start-with-log-mode t)

  ;; Make done tasks show up in the agenda log
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-columns-default-format "%20CATEGORY(Category) %65ITEM(Task) %TODO %6Effort(Estim){:}  %6CLOCKSUM(Clock) %TAGS")

  (setq org-agenda-custom-commands
        `(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (tags-todo "+PRIORITY=\"A\""
                       ((org-agenda-overriding-header "High Priority")))
            (todo "DOING"
                  ((org-agenda-overriding-header "Current Taks")
                   (org-agenda-max-todos nil)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Actions")
                   (org-agenda-max-todos nil)))
            (tags-todo "+followup" ((org-agenda-overriding-header "Needs Follow Up")))
            (todo "TODO"
                  ((org-agenda-overriding-header "Unprocessed Inbox Tasks")
                   (org-agenda-files '(,(torresmo/org-path "Inbox.org")))
                   (org-agenda-text-search-extra-files nil)))))

          ("n" "Next Tasks"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))))

#+end_src

**** Capture Templates

#+begin_src emacs-lisp

  (defun torresmo/on-org-capture ()
    ;; Don't show the confirmation header text
    (setq header-line-format nil)

    ;; Control how some buffers are handled
    (let ((template (org-capture-get :key t)))
      (pcase template
        ("jj" (delete-other-windows)))))
        
  (add-hook 'org-capture-mode-hook 'torresmo/on-org-capture)

  (setq org-capture-templates
    `(("t" "Tasks")
      ("tt" "Task" entry (file ,(torresmo/org-path "Inbox.org"))
          "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("jm" "Meetings" entry
           (file+olp+datetree ,(torresmo/org-path "Journal.org"))
           "\n* %<%I:%M %p> - %^{Title} \n\n%?\n\n"
           :tree-type week
           :clock-in :clock-resume
           :empty-lines 1)
      ("jt" "Task" entry
           (file+olp+datetree ,(torresmo/org-path "Journal.org"))
           "\n* %<%I:%M %p> - Task Notes: %a\n\n%?\n\n"
           :tree-type week
           :clock-in :clock-resume
           :empty-lines 1)
      ("jj" "Journal" entry
           (file+olp+datetree ,(torresmo/org-path "Journal.org"))
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           :tree-type week
           :clock-in :clock-resume
           :empty-lines 1)))  
         
#+end_src

*** End of =use-package org=

#+begin_src emacs-lisp

  (torresmo/org-font-setup))
  
#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading star in =org-mode=

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
  
#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers

#+begin_src emacs-lisp

  (defun torresmo/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . torresmo/org-mode-visual-fill))
  
#+end_src

*** Babel

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
        (python . t))))
  
#+end_src

*** Automatic Tangle

#+begin_src emacs-lisp

  (defun torresmo/org-babel-tangle-config ()
    (when (and buffer-file-name
               (string-equal "Emacs.org" (file-name-nondirectory buffer-file-name))
               (let ((dotfiles-dir (locate-dominating-file buffer-file-name "dotfiles")))
                 (and dotfiles-dir
                      (string-suffix-p "dotfiles/Emacs/Emacs.org" buffer-file-name))))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
      
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'torresmo/org-babel-tangle-config)))
#+end_src

*** Structure Templates

These templates enable you to type things like =<el= and then hit =Tab= to expand the template.

#+begin_src emacs-lisp
  
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("rs" . "src rust"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-structure-template-alist '("sql" . "src sql"))

#+end_src

*** Searching

#+begin_src emacs-lisp

  (defun torresmo/search-org-files ()
    (interactive)
    (counsel-rg "" "~/Workspaces/Personal/Notes" nil "Search Notes: "))

#+end_src

*** Bindings

#+begin_src emacs-lisp

  (use-package evil-org
    :after org
    :hook ((org-mode . evil-org-mode)
           (org-agenda-mode . evil-org-mode)
           (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textobjects additional)))))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (torresmo/leader-keys
    "o"   '(:ignore t :which-key "org mode")

    "oi"  '(:ignore t :which-key "insert")
    "oil" '(org-insert-link :which-key "insert link")

    "on"  '(org-toggle-narrow-to-subtree :which-key "toggle narrow")

    "os"  '(torresmo/search-org-files :which-key "search notes")

    "oa"  '(org-agenda :which-key "status")
    "ot"  '(org-todo-list :which-key "todos")
    "oc"  '(org-capture t :which-key "capture")
    "or"  '(org-refile t :which-key "refile")
    "od"  '(org-toggle-checkbox :which-key "Check")
    "ox"  '(org-export-dispatch t :which-key "export"))

#+end_src

*** Auto-show Markup Symbols

This package makes it much easier to edit Org documents when =org-hide-emphasis-markers= is turned on.  It temporarily shows the emphasis markers around certain markup elements when you place your cursor inside of them.  No more fumbling around with ~=~ and ~*~ characters!

#+begin_src emacs-lisp

  (use-package org-appear
    :hook (org-mode . org-appear-mode))

#+end_src

** Workspace Management

To simulate Doom Emacs Workspace management we use [[https://github.com/emacsmirror/eyebrowse][eyebrowse]].

#+begin_src emacs-lisp

  (use-package eyebrowse
  :config
    (eyebrowse-mode t)
    (setq eyebrowse-wrap-around t)
    (setq eyebrowse-new-workspace t)
    (setq eyebrowse-keymap-prefix (kbd "C-c C-w"))
    (global-set-key (kbd "C-c w") 'eyebrowse-switch-to-window-config))
    
  (torresmo/leader-keys
    "TAB" '(:ignore t :which-key "Workspaces")
    "TAB a" '(eyebrowse-switch-to-window-config :which-key "Select Workspace")
    "TAB r" '(eyebrowse-rename-window-config :which-key "Rename Workspace")
    "TAB d" '(eyebrowse-close-window-config :wich-key "Close Workspace"))

#+end_src

** Bookmarks

For better code navigation I added keybidings for manage bookmarks

#+begin_src emacs-lisp

  (torresmo/leader-keys
    "RET" '(:ignore t :which-key "Bookmarks")
    "RET RET" '(counsel-bookmark :which-key "Create or jump to Bookmark")
    "RET d" '(bookmark-delete :wich-key "Delete Bookmark"))

#+end_src

** Verb

Mode for sending and editing http requests

#+begin_src emacs-lisp

  (defun org-prop (prop)
    (org-entry-get (point) prop t))

  (use-package verb
  :defer t
    :bind (:map verb-mode-map
                ("C-c v" . verb-send-request-on-point)))
                
#+end_src

** Google

I love [[https://google.com][Google]] so using this package I can create queries and fast google searchs.

#+begin_src emacs-lisp

   (use-package google-this
    :ensure t
    :bind (("C-x C-k" . google-this-search))
    :config
      (setq google-this-keyword-prefix ""))    
    
#+end_src

*** Keybidings

#+begin_src emacs-lisp

  (torresmo/leader-keys
    "s" '(:ignore t :which-key "Search")
    "ss" '(google-this-search :which-key "Search on Google")
    "sw" '(google-this-forecast :wich-key "Weather"))

#+end_src

** Jwt decode

Function to decode jwt tokens and parse to json
 
#+begin_src emacs-lisp

  (defun jwt-decode ()
    "Jwt-decode region"
    (interactive)
    (let ((start (point)))
      (search-forward ".")
      (delete-char -1)
      (base64-decode-region start (point) 't)
      (json-pretty-print start (point)))
    (newline)
    (let ((start (point)))
      (search-forward ".")
      (delete-char -1)
      (base64-decode-region start (point) 't)
      (json-pretty-print start (point)))
    (newline))
    
#+end_src

*** Keybidings

#+begin_src emacs-lisp

  (torresmo/leader-keys
    "mj" '(jwt-decode :wich-key "JWT decode"))

#+end_src

* Applications

** Binding Prefix

#+begin_src emacs-lisp

  (torresmo/leader-keys
    "a"  '(:ignore t :which-key "apps"))

#+end_src

** RSS with Elfeed

[[https://githubcom/skeeto/elfeed][Elfeed]] is a great RSS feed reader. Uses for keeping track a few blogs and subreddits. 

#+begin_src emacs-lisp

  (use-package elfeed
    :commands elfeed
    :config
    (setq elfeed-feeds
          '(
            ;; Engineering 
            ("https://systemcrafters.net/rss/news.xml" engineering emacs)
            ("https://vitalik.ca/feed.xml" engineering blockchain crypto)
            ("https://matklad.github.io/feed.xml" engineering rust)
            ("https://this-week-in-rust.org/rss.xml" engineering rust)
            ("https://os.phil-opp.com/rss.xml" engineering rust))))

  (torresmo/leader-keys
    "ae" '(:ignore t :which-key "elfeed")
    "aee" '(elfeed :which-key "elfeed")
    "aeu" '(elfeed-update :which-key "elfeed-update")
    )

#+end_src

** IA with Claude

For IA integration we are using [[https://github.com/karthink/gptel][gptel]], a awesome LLM client to Emacs, since my current company provides me Antrophic api-key, I will use Claude as AI assistant.

#+begin_src emacs-lisp

  (use-package gptel
    :config
    (setq
     gptel-model "claude-3-sonnet-20240229"
     gptel-default-mode 'org-mode
     gptel-backend (gptel-make-anthropic "Claude"
                                         :stream t
                                         :key (lambda () (auth-source-pick-first-password :host "api.anthropic.com")))))

  (torresmo/leader-keys
    "aa" '(:ignore t :which-key "IA assistant")
    "aac" '(gptel :which-key "Chat")
    "aaf" '(gptel-add-file :which-key "Add file")
    "aam" '(gptel-menu :which-key "Menu")
    )

#+end_src

* Development

** Projectile

[[https://projectile.mx/][Projectile]] is a project management lib for Emacs.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; Set here the folder where we keep the Git Repos
    (when (file-directory-p "~/Workspaces")
      (setq projectile-project-search-path '("~/Workspaces")))
    (setq projectile-switch-project-action #'projectile-dired-other-window))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
    
  (torresmo/leader-keys
    "p" '(:ignore t :which-key "Projectile")
    "pp" '(projectile-switch-project :which-key "Switch Project")) 

#+end_src

** Magit

[[https://magit.vc/][Magit]] is a git interface for Emacs. There's a aditional package for extend Magit and manage PR's and Issues. For configuring this we need to create a [[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][Github Token]]

#+begin_src emacs-lisp

  (defun torresmo/magit-bury-buffer (&optional kill-buffer)
    (interactive "P")
    (if (>= (prefix-numeric-value kill-buffer) 1)
        (mapc #'kill-buffer (magit-mode-get-buffers))
      (funcall magit-bury-buffer-function kill-buffer)))
        
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :config
    (setq magit-bury-buffer-function #'torresmo/magit-bury-buffer))
  
  (torresmo/leader-keys
    "g"   '(:ignore t :which-key "magit")

    "gg"  '(magit-status :which-key "magit-status")
    "gb"  '(magit-blame :which-key "magit-blame"))

#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is usefull in prog-modes because it colorizes parantheses and brackets making a lot easier to visually match parentheses in lisp code without having to count them.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Commenting

Emacs built in commenting functionality doesn't always works as expected, so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
  
#+end_src

** Changes Highlighting

For better code visibility whitout open Magit

#+begin_src emacs-lisp

  (add-hook 'global-highlight-changes-mode-hook #'torresmo-highlight-changes-config)
  (global-highlight-changes-mode t)
  (setq highlight-changes-visibility-initial-state nil)
  (global-set-key (kbd "<f6>") 'highlight-changes-visible-mode)

#+end_src

** LSP

We use [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many proggraming languages via "language servers".
The =lsp-keymap-prefix= setting enables you to define a prefix for where lsp-mode’s default keybindings will be added.
The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a lsp-mode buffer

#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands lsp 
    :bind (:map lsp-mode-map
                ("C-c r" . lsp-rename)
                ("C-c h" . lsp-describe-thing-at-point)
                ("C-c a" . lsp-execute-code-action)
                ("C-M-." . lsp-goto-implementation))
    :config
    (setq-default lsp-prefer-flymake nil
                  lsp-file-watch-threshold 10000
                  lsp-headerline-breadcrumb-enable nil
                  lsp-lens-enable nil
                  lsp-enable-which-key-integration t))
  
#+end_src

*** LSP Ui

#+begin_src emacs-lisp

  (use-package lsp-ui
    :defer t
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-sideline-ignore-duplicate t
          lsp-ui-sideline-show-code-actions t
          lsp-ui-peek-always-show t
          lsp-ui-doc-enable nil)
    (lsp-ui-sideline-toggle-symbols-info))

#+end_src

*** LSP Ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make easy to search for things by name in our code.

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src

*** Keybidings

Useful keybidings for interacting with LSP modes

#+begin_src emacs-lisp

  (torresmo/leader-keys
    "l" '(:ignore t :which-key "LSP")
    "lr" '(lsp-rename :which-key "Rename")
    "ld" '(lsp-describe-thing-at-point :which-key "Describe thing")
    "le" '(lsp-execute-code-action :which-key "Execute code action")
    "lg" '(lsp-goto-implementation :which-key "Goto impl")
    
    "lf" '(:ignore t :which-key "Find")
    "lfd" '(lsp-ui-peek-find-definitions :which-key "Definitions")
    "lfr" '(lsp-ui-peek-find-references :which-key "References"))


#+end_src

** Company Mode

[[https://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface.
We also use [[https://github.com/sebastiencs/company-box][company-box]] to furter enhance the look of completions with icons and better presentation

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
  
#+end_src

** Debugging

Emacs integrates with gdb and lldb via the [[https://emacs-lsp.github.io/dap-mode/][dap-mode]]  package. Here we are configuring for Rust development since it's my main language, but in the future I will make this more generic.

*** Auxiliary functions

#+begin_src emacs-lisp

  (defun get-rust-bin-name ()
    "Get the name of the Rust binary from Cargo.toml."
    (let ((cargo-toml (expand-file-name "Cargo.toml" (lsp-workspace-root))))
      (if (file-exists-p cargo-toml)
          (with-temp-buffer
            (insert-file-contents cargo-toml)
            (if (re-search-forward "^name = \"\\([^\"]+\\)\"" nil t)
                (match-string 1)
              (error "Couldn't find package name in Cargo.toml")))
        (error "Cargo.toml not found"))))

#+end_src

*** Package

#+begin_src emacs-lisp

  (use-package dap-mode
    :hook
    (rust-mode . (lambda ()
    (require 'dap-lldb)
    (require 'dap-gdb-lldb)
    (require 'dap-codelldb)

    (dap-gdb-lldb-setup)
    (dap-codelldb-setup)

#+end_src

*** Templates

#+begin_src emacs-lisp

  (dap-register-debug-template
    "Debug Rust"
    (list :type "lldb"
          :request "launch"
          :name "LLDB::Run"
          :miDebuggerPath "~/.asdf/shims/rust-lldb"
          :target nil
          :cwd nil
          :program (concat "${workspaceFolder}/target/debug/"(get-rust-bin-name))))

#+end_src

*** End of =use-package dap-mode=

#+begin_src emacs-lisp
  )))
#+end_src

*** Keybidings

#+begin_src emacs-lisp

  (torresmo/leader-keys
    "d"   '(:ignore t :which-key "Debugg")

    "ds"  '(dap-debug :which-key "Debugger")
    "dh"  '(dap-hydra :which-key "Helper")
    "da"  '(dap-breakpoint-add :which-key "Add breakpoint")
    "dr"  '(dap-breakpoint-delete :which-key "Remove breakpoint")
    "de"  '(dap-debug-edit-template :which-key "Edit template")
    "dd"  '(dap-disconnect :which-key "Disconect"))

#+end_src

*** Errors
The  =(dap-gdb-lldb-setup)= will install a VS Code extension to =user-emacs-dir/.extension/vscode/webfreak.debug= . If the installation was not successful we need to delete =vscode/= folder and run =(dap-gdb-lldb-setup)= again.

* Languages

** Ruby

Basic configuration for Ruby Language

#+begin_src emacs-lisp

  (use-package ruby-mode
    :defer t
    :hook (ruby-mode . lsp)
    :config
    (setq ruby-indent-level 2))
  
#+end_src

*** Server

#+begin_src shell tangle: no

  gem install solargraph

#+end_src

** Typescript

Basic configuration for Typescript language

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp)
    :config
    (setq typescript-indent-level 2))
  
#+end_src

*** Server

#+begin_src shell tangle: no

  npm install -g typescript-language-server typescript

#+end_src

** Rust

Basic configuration for Rust language

#+begin_src emacs-lisp

  (use-package rust-mode
    :mode "\\.rs\\'"
    :hook (rust-mode . lsp)
    :config
    (setq lsp-rust-server 'rust-analyzer)
    (setq lsp-rust-analyzer-proc-macro-enable t)
    (setq lsp-rust-all-features t)
    (setq rust-format-on-save t))

  (use-package cargo
    :defer t)
  
#+end_src

*** Server

#+begin_src sh tangle: no

  rustup component add rust-analyzer

#+end_src

** Terraform

Basic configuration for Terraform

#+begin_src emacs-lisp

  (use-package terraform-mode
    :mode "\\.tf\\'"
    :init (setq terraform-format-on-save t))
  
#+end_src

** Go

Basic configuration for Go language

#+begin_src emacs-lisp

  (use-package go-mode
    :hook (go-mode . lsp))
  
#+end_src

*** Server

#+begin_src sh

go install golang.org/x/tools/gopls@latest

#+end_src

** YAML

Basic configuration for Ruby Language

#+begin_src emacs-lisp

  (use-package yaml-mode
    :defer t)

#+end_src

* Terminal

Configure terminal

** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode=

#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
  
#+end_src

** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is a improved terminal emulator wich uses a copiled native module to interact with the undelying terminal applications.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    (setq vterm-shell "zsh")                         ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src

** Keybidings

Using keybidings to easy launch terms

#+begin_src emacs-lisp

  (torresmo/leader-keys
    "t" '(:ignore t :which-key "terminal")

    "tv" '(vterm :which-key "vterm")
    "ta" '(ansi-term :which-key "ansi-term")
    "tt" '(term :which-key "term"))

#+end_src

* File Management

=Dired= is a built-in file manager for Emacs. Here's a Cheat Sheet to use it

** Dired

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp
  
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

* Misc

** References

*** Resources

[[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs From Scratch]] series. Without it this configuration will not exists.
[[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]] is a awesome list to packages and great stuffs

*** Dotfiles

[[https://github.com/daviwil/dotfiles/blob/9776d65c4486f2fa08ec60a06e86ecb6d2c40085/Emacs.org][David Wilson dotfiles]] - The real path to GNUrvana
